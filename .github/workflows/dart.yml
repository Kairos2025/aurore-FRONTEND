name: Flutter Build Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      build-type:
        description: 'Build type (debug, release, or profile)'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release
          - profile

env:
  FLUTTER_VERSION: '3.24.0'  # Includes Dart 3.5.0
  PROJECT_DIR: 'aurore_frontend'
  BUILD_CACHE_KEY: ${{ github.run_id }}-${{ github.run_attempt }}
  VERSION_OFFSET: 1000  # Base offset for build number

jobs:
  setup:
    name: Setup and Validate
    runs-on: ubuntu-latest
    outputs:
      setup-complete: ${{ steps.validate.outputs.setup_complete }}
      flutter-version: ${{ steps.install-flutter.outputs.flutter_version }}
      dart-version: ${{ steps.verify-flutter.outputs.dart_version }}
      build-number: ${{ steps.build-number.outputs.build_number }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for commit count

      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/flutter
          key: flutter-sdk-${{ env.FLUTTER_VERSION }}-stable
          restore-keys: flutter-sdk-

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        id: install-flutter
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          architecture: x64
          cache: true
          cache-key: flutter-sdk-${{ env.FLUTTER_VERSION }}-stable
        continue-on-error: false

      - name: Verify Flutter Installation
        id: verify-flutter
        run: |
          flutter --version >/dev/null || { echo "::error::Flutter installation failed"; exit 1; }
          FLUTTER_VERSION=$(flutter --version | awk '/Flutter/{print $2}')
          DART_VERSION=$(dart --version 2>/dev/null | awk '{print $4}')
          echo "flutter_version=$FLUTTER_VERSION" >> "$GITHUB_OUTPUT"
          echo "dart_version=$DART_VERSION" >> "$GITHUB_OUTPUT"
          echo "Installed Flutter $FLUTTER_VERSION with Dart $DART_VERSION"

      - name: Calculate Build Number
        id: build-number
        run: |
          COMMIT_COUNT=$(git rev-list --count HEAD)
          BUILD_NUMBER=$((COMMIT_COUNT + ${{ env.VERSION_OFFSET }}))
          echo "build_number=$BUILD_NUMBER" >> "$GITHUB_OUTPUT"
          echo "Build number set to $BUILD_NUMBER"

      - name: Validate Environment
        id: validate
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ ! -f "pubspec.yaml" ]; then
            echo "::error::pubspec.yaml not found in $PROJECT_DIR!"
            echo "setup_complete=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi
          # Extract Dart SDK constraint (e.g., '>=3.5.0 <4.0.0')
          REQUIRED_DART=$(grep 'sdk:' pubspec.yaml | sed 's/.*sdk: *//; s/[ \t]*$//; s/[\"\']//g')
          CURRENT_DART=${{ steps.verify-flutter.outputs.dart_version }}
          echo "Required Dart: $REQUIRED_DART"
          echo "Current Dart: $CURRENT_DART"
          # Parse version range (e.g., '>=3.5.0 <4.0.0')
          MIN_VERSION=$(echo "$REQUIRED_DART" | grep -o '>=.*' | sed 's/>=//; s/ *<.*//')
          MAX_VERSION=$(echo "$REQUIRED_DART" | grep -o '<.*' | sed 's/<//')
          if [ -z "$MIN_VERSION" ] || [ -z "$MAX_VERSION" ]; then
            echo "::error::Failed to parse version range from $REQUIRED_DART"
            echo "setup_complete=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi
          echo "Checking Dart SDK compatibility..."
          # Validate using dpkg --compare-versions
          if ! dpkg --compare-versions "$CURRENT_DART" ge "$MIN_VERSION" || ! dpkg --compare-versions "$CURRENT_DART" lt "$MAX_VERSION"; then
            echo "::error::Dart SDK $CURRENT_DART does not satisfy required $REQUIRED_DART"
            echo "setup_complete=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi
          echo "setup_complete=true" >> "$GITHUB_OUTPUT"

  android:
    name: Android Build
    needs: setup
    if: ${{ needs.setup.outputs.setup_complete == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/flutter
          key: flutter-sdk-${{ env.FLUTTER_VERSION }}-stable
          restore-keys: flutter-sdk-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          architecture: x64
          cache: true
          cache-key: flutter-sdk-${{ env.FLUTTER_VERSION }}-stable

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Restore Dependency Cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PROJECT_DIR }}/.dart_tool
            ${{ env.PROJECT_DIR }}/.flutter-plugins
            ${{ env.PROJECT_DIR }}/.flutter-plugins-dependencies
            ${{ env.PROJECT_DIR }}/.pub-cache
          key: flutter-deps-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: flutter-deps-

      - name: Install Dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: flutter pub get

      - name: Run Flutter Doctor
        run: flutter doctor -v

      - name: Build Android APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter build apk --${{ github.event.inputs.build-type || 'release' }} \
            --dart-define=APP_ENV=${{ github.event.inputs.build-type || 'release' }} \
            --build-number=${{ needs.setup.outputs.build_number }} \
            --verbose

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ github.event.inputs.build-type || 'release' }}-apk
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-*.apk
          retention-days: 7

  ios:
    name: iOS Build
    needs: setup
    if: ${{ needs.setup.outputs.setup_complete == 'true' }}
    runs-on: macos-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4

      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/flutter
          key: flutter-sdk-${{ env.FLUTTER_VERSION }}-stable
          restore-keys: flutter-sdk-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          architecture: x64
          cache: true
          cache-key: flutter-sdk-${{ env.FLUTTER_VERSION }}-stable

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod setup

      - name: Restore Dependency Cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PROJECT_DIR }}/.dart_tool
            ${{ env.PROJECT_DIR }}/.flutter-plugins
            ${{ env.PROJECT_DIR }}/.flutter-plugins-dependencies
            ${{ env.PROJECT_DIR }}/.pub-cache
            ${{ env.PROJECT_DIR }}/ios/Pods
          key: flutter-ios-deps-${{ hashFiles('**/pubspec.lock', '**/Podfile.lock') }}
          restore-keys: flutter-ios-deps-

      - name: Install Dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get
          cd ios && pod install

      - name: Set up Code Signing
        if: ${{ github.event.inputs.build-type == 'release' || github.event_name == 'push' }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          echo "$BUILD_CERTIFICATE_BASE64" | base64 --decode > build_certificate.p12
          security import build_certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          echo "$PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Build iOS IPA
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter build ipa --${{ github.event.inputs.build-type || 'release' }} \
            --dart-define=APP_ENV=${{ github.event.inputs.build-type || 'release' }} \
            --build-number=${{ needs.setup.outputs.build_number }} \
            --export-options-plist=ios/ExportOptions.plist \
            --verbose

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ github.event.inputs.build-type || 'release' }}-ipa
          path: ${{ env.PROJECT_DIR }}/build/ios/ipa/*.ipa
          retention-days: 7
