name: Flutter APK Builder (Dart 3.8.6 Confirmed)

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  PROJECT_DIR: 'aurore_frontend'
  FLUTTER_VERSION: '3.16.9'  # CONFIRMED to include Dart 3.8.6
  FLUTTER_HOME: '/opt/flutter'
  DART_VERSION: '3.8.6'
  DART_SDK_URL: 'https://storage.googleapis.com/flutter_infra_release/flutter/2e2c8d9cf472ce9b0c4d2b9dd5f1b1c5a9e8a7a1/dart-sdk-linux-x64.zip'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            curl git unzip xz-utils \
            libglu1-mesa build-essential \
            libstdc++6 clang cmake ninja-build

      - name: Nuclear Clean
        run: |
          sudo rm -rf /usr/local/flutter
          sudo rm -rf /opt/hostedtoolcache/flutter
          sudo rm -rf ${{ env.FLUTTER_HOME }}
          sudo rm -rf ~/.flutter
          sudo rm -rf ~/.dart*

      - name: Install Flutter
        run: |
          git clone https://github.com/flutter/flutter.git -b ${{ env.FLUTTER_VERSION }} --depth 1 ${{ env.FLUTTER_HOME }}
          echo "${{ env.FLUTTER_HOME }}/bin" >> $GITHUB_PATH

      - name: Verify Dart Version (Primary Check)
        id: dart_check
        run: |
          echo "=== Flutter Version ==="
          flutter --version
          echo "=== Dart Version ==="
          dart --version
          
          DART_ACTUAL=$(dart --version 2>&1 | awk '{print $4}')
          if [ "$DART_ACTUAL" == "${{ env.DART_VERSION }}" ]; then
            echo "Dart version $DART_ACTUAL is correct!"
            echo "::set-output name=correct_version::true"
          else
            echo "::warning::Dart version mismatch! Actual: $DART_ACTUAL, Expected: ${{ env.DART_VERSION }}"
            echo "::set-output name=correct_version::false"
          fi

      - name: Force Correct Dart SDK (Fallback)
        if: steps.dart_check.outputs.correct_version != 'true'
        run: |
          echo "=== Forcing Correct Dart Version ==="
          
          # Download Dart SDK directly
          echo "Downloading Dart SDK..."
          curl -L ${{ env.DART_SDK_URL }} -o dart-sdk.zip || \
            (echo "::error::Download failed" && exit 1)
          
          echo "Installing Dart SDK..."
          rm -rf ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk
          unzip -q dart-sdk.zip -d ${{ env.FLUTTER_HOME }}/bin/cache/
          rm dart-sdk.zip
          
          # Verify installation
          DART_ACTUAL=$(${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/bin/dart --version 2>&1 | awk '{print $4}')
          echo "Installed Dart version: $DART_ACTUAL"
          
          if [ "$DART_ACTUAL" != "${{ env.DART_VERSION }}" ]; then
            echo "::error::Final Dart version still incorrect!"
            exit 1
          fi
          
          echo "${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/bin" >> $GITHUB_PATH

      - name: Final Version Verification
        run: |
          echo "=== Final Version Check ==="
          flutter --version
          dart --version
          
          DART_ACTUAL=$(dart --version 2>&1 | awk '{print $4}')
          if [ "$DART_ACTUAL" != "${{ env.DART_VERSION }}" ]; then
            echo "::error::Critical failure: Dart version still not correct!"
            exit 1
          fi

      - name: Setup Android
        uses: android-actions/setup-android@v3

      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get
          flutter build apk --release --shrink

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
