name: Aurore Frontend CI/CD

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.22.0'
  PROJECT_DIR: 'aurore_frontend'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Validate and Fix pubspec.yaml
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # Validate YAML syntax first
          if ! python3 -c "import yaml; yaml.safe_load(open('pubspec.yaml'))"; then
            echo "::error::Original pubspec.yaml has syntax errors"
            exit 1
          fi

          # Create backup
          cp pubspec.yaml pubspec.backup.yaml

          # Extract project metadata safely
          PROJECT_NAME=$(grep '^name:' pubspec.yaml | sed 's/^name: *//; s/:/\\:/g')
          PROJECT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/^version: *//; s/:/\\:/g' || echo '1.0.0+1')
          PROJECT_DESCRIPTION=$(grep '^description:' pubspec.yaml | sed 's/^description: *//; s/:/\\:/g' || echo '')

          # Create new perfectly formatted pubspec.yaml
          {
            echo "name: $PROJECT_NAME"
            echo "description: $PROJECT_DESCRIPTION"
            echo "version: $PROJECT_VERSION"
            echo ""
            echo "environment:"
            echo "  sdk: \">=3.4.0 <4.0.0\""
            echo "  flutter: \">=3.22.0 <4.0.0\""
            echo ""
            echo "dependencies:"
            echo "  flutter:"
            echo "    sdk: flutter"
            echo "  firebase_core: ^2.24.0"
            echo "  firebase_auth: ^4.11.0"
            echo "  test: ^1.24.0"
            echo "  material_color_utilities: ^0.8.0"
          } > pubspec.yaml

          # Add other dependencies with proper formatting
          awk '
            BEGIN { in_deps = 0 }
            /^dependencies:/ { in_deps = 1; next }
            /^[a-z]/ && in_deps { in_deps = 0 }
            in_deps && !/flutter:|firebase_core:|firebase_auth:|test:|material_color_utilities:/ {
              if ($0 ~ /:/ && !seen[$1]++) {
                gsub(/"/, "", $0)  # Remove quotes if present
                print "  " $0  # 2-space indentation
              }
            }
          ' pubspec.backup.yaml >> pubspec.yaml

          # Add dev_dependencies if they exist
          if grep -q '^dev_dependencies:' pubspec.backup.yaml; then
            echo "" >> pubspec.yaml
            echo "dev_dependencies:" >> pubspec.yaml
            awk '
              BEGIN { in_dev = 0 }
              /^dev_dependencies:/ { in_dev = 1; next }
              /^[a-z]/ && in_dev { in_dev = 0 }
              in_dev && $0 ~ /:/ {
                gsub(/"/, "", $0)
                print "  " $0  # 2-space indentation
              }
            ' pubspec.backup.yaml >> pubspec.yaml
          fi

          # Add flutter configuration if it exists
          if grep -q '^flutter:' pubspec.backup.yaml; then
            echo "" >> pubspec.yaml
            echo "flutter:" >> pubspec.yaml
            awk '
              BEGIN { in_flutter = 0 }
              /^flutter:/ { in_flutter = 1; next }
              /^[a-z]/ && in_flutter { in_flutter = 0 }
              in_flutter { print "  " $0 }  # 2-space indentation
            ' pubspec.backup.yaml >> pubspec.yaml
          fi

          # Validate the new YAML file
          if ! python3 -c "import yaml; yaml.safe_load(open('pubspec.yaml'))"; then
            echo "::error::Generated pubspec.yaml has syntax errors"
            echo "Generated content:"
            cat pubspec.yaml
            exit 1
          fi

          echo "Final pubspec.yaml contents:"
          cat pubspec.yaml

      - name: Resolve Dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter clean
          flutter pub get

      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -e
          flutter build apk --release \
            --no-sound-null-safety \
            --dart-define=CI_ENV=true \
            --split-debug-info=build/symbols/ \
            --obfuscate

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
