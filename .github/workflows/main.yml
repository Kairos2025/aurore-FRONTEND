name: Aurore Frontend CI/CD

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.29.3'  # Known stable version
  PROJECT_DIR: 'aurore_frontend'
  REQUIRED_DART_VERSION: "3.8.0"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install Base Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install Correct Dart Version
        run: |
          # Install required tools
          sudo apt-get update
          sudo apt-get install -y jq curl unzip

          # Get available Dart versions (fallback to known working version)
          KNOWN_DART_VERSION="3.8.6"  # Known to exist and work
          
          echo "Trying to fetch available Dart versions..."
          if RELEASES_JSON=$(curl -s https://storage.googleapis.com/dart-archive/channels/stable/release/releases.json); then
            echo "Successfully fetched releases.json"
            if VERSIONS=$(echo "$RELEASES_JSON" | jq -r '.releases[].version' 2>/dev/null | sort -V); then
              echo "Found versions:"
              echo "$VERSIONS"
              
              # Find first version >= required
              for ver in $VERSIONS; do
                if [ "$(printf '%s\n' "${{ env.REQUIRED_DART_VERSION }}" "$ver" | sort -V | head -n1)" = "${{ env.REQUIRED_DART_VERSION }}" ]; then
                  SELECTED_VERSION=$ver
                  break
                fi
              done
            fi
          fi

          # Fallback to known version if automatic detection failed
          if [ -z "$SELECTED_VERSION" ]; then
            echo "::warning::Using known working Dart version $KNOWN_DART_VERSION"
            SELECTED_VERSION=$KNOWN_DART_VERSION
          fi

          echo "Selected Dart version: $SELECTED_VERSION"
          
          # Download and install Dart SDK
          echo "Downloading Dart $SELECTED_VERSION..."
          if ! wget https://storage.googleapis.com/dart-archive/channels/stable/release/$SELECTED_VERSION/sdk/dartsdk-linux-x64-release.zip -O dart-sdk.zip; then
            echo "::error::Failed to download Dart SDK"
            exit 1
          fi
          
          unzip -q dart-sdk.zip -d ~/dart-sdk
          export PATH="$HOME/dart-sdk/dart-sdk/bin:$PATH"
          
          # Verify installation
          echo "Installed Dart version: $(dart --version 2>&1 | head -n1)"

      - name: Configure Environment
        run: |
          flutter precache --force
          echo "=== Environment Summary ==="
          echo "Flutter: $(flutter --version)"
          echo "Dart: $(dart --version)"
          echo "Java: $(java -version 2>&1 | head -n1)"

      - name: Setup Android
        run: |
          mkdir -p ~/.android
          touch ~/.android/repositories.cfg
          yes | sdkmanager --licenses || true
          flutter doctor --android-licenses

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            clang \
            cmake \
            ninja-build \
            pkg-config \
            liblzma-dev

      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get
          flutter build apk --release \
            --no-sound-null-safety \
            --dart-define=CI_ENV=true \
            --split-debug-info=build/symbols/ \
            --obfuscate

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
