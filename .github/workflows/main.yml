name: Build APK and IPA

on:
  push:
    branches:
      - update-gradle
  pull_request:
    branches:
      - update-gradle

jobs:
  fetch-flutter-version:
    runs-on: ubuntu-latest
    outputs:
      flutter_version: ${{ steps.set-flutter-version.outputs.flutter_version }}
    steps:
      - name: Fetch latest stable Flutter version
        id: set-flutter-version
        run: |
          echo "Fetching the latest stable Flutter version..."
          git clone --depth 1 --branch stable https://github.com/flutter/flutter.git flutter_latest
          cd flutter_latest
          ./bin/flutter --version
          flutter_version=$(./bin/flutter --version --machine | grep -oP '"frameworkVersion": "\K[0-9]+\.[0-9]+\.[0-9]+')
          echo "Latest stable Flutter version: $flutter_version"
          echo "flutter_version=$flutter_version" >> $GITHUB_OUTPUT
          cd ..
          rm -rf flutter_latest

  build-android:
    needs: fetch-flutter-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: aurore-FRONTEND

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2.8.0
        with:
          flutter-version: ${{ needs.fetch-flutter-version.outputs.flutter_version }}
          channel: 'stable'
          architecture: 'x64'

      - name: Verify Flutter setup
        run: |
          flutter doctor -v || { echo "Error: Flutter setup failed"; exit 1; }
          flutter --version || { echo "Error: Flutter not found"; exit 1; }
          dart --version || { echo "Error: Dart not found"; exit 1; }
          dart_version=$(dart --version 2>&1 | grep -oP '\d+\.\d+\.\d+')
          echo "Dart version: $dart_version"

      - name: Accept Android licenses
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          yes | flutter doctor --android-licenses || { echo "Error: Failed to accept Android licenses"; exit 1; }

      - name: Verify directory
        run: |
          pwd
          ls -la .
          if [ -d "./aurore-FRONTEND" ]; then
            echo "Found aurore-FRONTEND directory"
            cd ./aurore-FRONTEND
            ls -la .
            if [ -d "./aurore_frontend" ]; then
              echo "Found aurore_frontend directory"
              cd ./aurore_frontend
              ls -la .
              if [ -f "pubspec.yaml" ]; then
                echo "Found pubspec.yaml in aurore_frontend"
              else
                echo "Error: pubspec.yaml not found in aurore_frontend"; exit 1
              fi
            else
              echo "Error: aurore_frontend directory not found"; exit 1
            fi
          else
            echo "Error: aurore-FRONTEND directory not found"; exit 1
          fi

      - name: Install initial dependencies
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          flutter pub get || { echo "Error: Failed to get initial dependencies"; echo "pubspec.yaml content:"; cat pubspec.yaml; exit 1; }

      - name: Regenerate Android project
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          cp pubspec.yaml pubspec.yaml.original
          echo "Backed up original pubspec.yaml to pubspec.yaml.original"
          if [ -d "android" ]; then
            mv android android_backup
            echo "Backed up existing android directory to android_backup"
          fi
          if [ -d "lib" ]; then
            cp -r lib lib_backup
            echo "Backed up lib directory to lib_backup"
          fi
          if [ -d "assets" ]; then
            cp -r assets assets_backup
            echo "Backed up assets directory to assets_backup"
          fi
          if [ -d "fonts" ]; then
            cp -r fonts fonts_backup
            echo "Backed up fonts directory to fonts_backup"
          fi
          flutter create -t app . --platforms android
          mv pubspec.yaml pubspec.yaml.new
          mv pubspec.yaml.original pubspec.yaml
          echo "Restored original pubspec.yaml"
          if [ -d "lib_backup" ]; then
            rm -rf lib
            mv lib_backup lib
            echo "Restored lib directory"
          else
            echo "Error: lib_backup directory not found"; exit 1
          fi
          if [ -d "assets_backup" ]; then
            rm -rf assets
            mv assets_backup assets
            echo "Restored assets directory"
          else
            echo "Warning: assets_backup directory not found, using default"
          fi
          if [ -d "fonts_backup" ]; then
            rm -rf fonts
            mv fonts_backup fonts
            echo "Restored fonts directory"
          else
            echo "Warning: fonts_backup directory not found, using default"
          fi

      - name: List lib directory structure
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          ls -R lib

      - name: Update imports in Dart files
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          find lib/core/providers -type f -name "*.dart" -exec sed -i 's|import "utils/|import "../utils/|g' {} +
          find lib/core/providers -type f -name "*.dart" -exec sed -i 's|import "models/|import "../models/|g' {} +
          find lib/core/providers -type f -name "*.dart" -exec sed -i 's|import "core/providers/|import "./|g' {} +
          find lib/features/auth -type f -name "*.dart" -exec sed -i 's|import "core/|import "../../core/|g' {} +
          find lib/features/auth -type f -name "*.dart" -exec sed -i 's|import "utils/|import "../../utils/|g' {} +
          find lib/features/auth -type f -name "*.dart" -exec sed -i 's|import "widgets/|import "../../widgets/|g' {} +
          find lib/features/dashboard/teacher -type f -name "*.dart" -exec sed -i 's|import "core/|import "../../../core/|g' {} +
          find lib/features/dashboard/teacher -type f -name "*.dart" -exec sed -i 's|import "widgets/|import "../../../widgets/|g' {} +
          find lib/features/dashboard/student -type f -name "*.dart" -exec sed -i 's|import "core/|import "../../../core/|g' {} +
          find lib/features/dashboard/student -type f -name "*.dart" -exec sed -i 's|import "widgets/|import "../../../widgets/|g' {} +
          find lib/features/dashboard/admin -type f -name "*.dart" -exec sed -i 's|import "core/|import "../../../core/|g' {} +
          find lib/features/dashboard/admin -type f -name "*.dart" -exec sed -i 's|import "models/|import "../../../models/|g' {} +
          find lib/features/dashboard/admin -type f -name "*.dart" -exec sed -i 's|import "widgets/|import "../../../widgets/|g' {} +
          find lib/features/dashboard/support -type f -name "*.dart" -exec sed -i 's|import "widgets/|import "../../../widgets/|g' {} +
          find lib/features -type f -name "*.dart" -not -path "lib/features/*/*" -exec sed -i 's|import "core/|import "../core/|g' {} +
          find lib/features -type f -name "*.dart" -not -path "lib/features/*/*" -exec sed -i 's|import "models/|import "../models/|g' {} +
          find lib/features -type f -name "*.dart" -not -path "lib/features/*/*" -exec sed -i 's|import "widgets/|import "../widgets/|g' {} +
          find lib -type f -name "*.dart" -exec sed -i 's|package:aurore_school/||g' {} +
          echo "Updated imports in all Dart files to use correct relative paths"
          find lib -type f -name "*.dart" -exec cat {} \;

      - name: Install dependencies
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          flutter pub get || { echo "Error: Failed to get dependencies"; echo "pubspec.yaml content:"; cat pubspec.yaml; exit 1; }

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          sdk-level: '33'
          ndk-version: '27.0.12077973'

      - name: Update NDK version in build.gradle.kts
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          sed -i '/ndkVersion = flutter.ndkVersion/d' android/app/build.gradle.kts
          sed -i '/android {/a \        ndkVersion = "27.0.12077973"' android/app/build.gradle.kts
          echo "Updated NDK version in android/app/build.gradle.kts"
          cat android/app/build.gradle.kts

      - name: Build APK
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          flutter build apk --release || { echo "Error: APK build failed"; cat android/app/build.gradle.kts; exit 1; }

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: aurore-FRONTEND/aurore_frontend/build/app/outputs/flutter-apk/app-release.apk

  build-ios:
    needs: fetch-flutter-version
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: aurore-FRONTEND

      - name: Set up Flutter
        uses: subosito/flutter-action@v2.8.0
        with:
          flutter-version: ${{ needs.fetch-flutter-version.outputs.flutter_version }}
          channel: 'stable'
          architecture: 'x64'

      - name: Verify Flutter setup
        run: |
          flutter doctor -v || { echo "Error: Flutter setup failed"; exit 1; }
          flutter --version || { echo "Error: Flutter not found"; exit 1; }
          dart --version || { echo "Error: Dart not found"; exit 1; }
          dart_version=$(dart --version 2>&1 | grep -oP '\d+\.\d+\.\d+')
          echo "Dart version: $dart_version"

      - name: Install dependencies
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          flutter pub get || { echo "Error: Failed to get dependencies"; echo "pubspec.yaml content:"; cat pubspec.yaml; exit 1; }

      - name: Set up Ruby and CocoaPods
        run: |
          gem install cocoapods
          pod --version

      - name: Install CocoaPods dependencies
        working-directory: ./aurore-FRONTEND/aurore_frontend/ios
        run: |
          pod install || { echo "Error: Failed to install CocoaPods dependencies"; exit 1; }

      - name: Set up code signing
        working-directory: ./aurore-FRONTEND/aurore_frontend
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create a custom keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          # Import certificate
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          # Update Xcode project for manual signing
          sed -i '' 's/Automatic/Manual/' ios/Runner.xcodeproj/project.pbxproj
          echo "Code signing setup complete"

      - name: Build IPA
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          flutter build ios --release --no-codesign || { echo "Error: iOS build failed"; exit 1; }
          cd ios
          xcodebuild -workspace Runner.xcworkspace -scheme Runner -sdk iphoneos -configuration Release archive -archivePath build/Runner.xcarchive
          xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportOptionsPlist ../exportOptions.plist -exportPath build/ipa
          echo "IPA built at build/ipa/Runner.ipa"

      - name: Create exportOptions.plist
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>development</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
          </dict>
          </plist>
          EOF
          echo "Created exportOptions.plist"

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: Runner.ipa
          path: aurore-FRONTEND/aurore_frontend/ios/build/ipa/Runner.ipa
