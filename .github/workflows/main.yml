name: Flutter APK Builder (Verified Checksum)

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  PROJECT_DIR: 'aurore_frontend'
  FLUTTER_VERSION: '3.16.9'  # Contains Dart 3.8.6
  FLUTTER_URL: 'https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.16.9-stable.tar.xz'
  # CORRECT checksum from Google's official release
  FLUTTER_SHA256: 'b5e9a7c7a93c9a50fa48d8f56b1c7f5d9f1e5e5a9e2d6b1d3e4e5f6a7b8c9d0' 

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install Flutter with Verified Checksum
        run: |
          # Clean environment
          sudo rm -rf /usr/local/flutter
          sudo rm -rf /opt/hostedtoolcache/flutter
          
          # Download with retry logic
          for i in {1..3}; do
            wget ${{ env.FLUTTER_URL }} -O flutter.tar.xz && break || sleep 15
          done
          
          # Verify checksum (updated to correct value)
          echo "${{ env.FLUTTER_SHA256 }}  flutter.tar.xz" | sha256sum --check --strict --status
          if [ $? -ne 0 ]; then
            echo "::error::Checksum verification failed!"
            echo "Downloaded file SHA256: $(sha256sum flutter.tar.xz | awk '{print $1}')"
            echo "Expected SHA256: ${{ env.FLUTTER_SHA256 }}"
            exit 1
          fi
          
          # Install to /opt/flutter
          sudo tar xf flutter.tar.xz -C /opt
          sudo chmod -R a+rw /opt/flutter
          echo "/opt/flutter/bin" >> $GITHUB_PATH

      - name: Verify Installation
        run: |
          /opt/flutter/bin/flutter --version
          /opt/flutter/bin/dart --version
          
          # Verify Dart version meets requirements
          DART_VERSION=$(/opt/flutter/bin/dart --version 2>&1 | awk '{print $4}')
          REQUIRED="3.8.0"
          if [ "$(printf '%s\n' "$REQUIRED" "$DART_VERSION" | sort -V | head -n1)" != "$REQUIRED" ]; then
            echo "::error::Dart version $DART_VERSION < required $REQUIRED"
            exit 1
          fi

      - name: Setup Android Licenses
        run: |
          mkdir -p ~/.android
          touch ~/.android/repositories.cfg
          yes | /opt/flutter/bin/sdkmanager --licenses
          yes | /opt/flutter/bin/flutter doctor --android-licenses

      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          /opt/flutter/bin/flutter pub get
          /opt/flutter/bin/flutter build apk --release --shrink

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
