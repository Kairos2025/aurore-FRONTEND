name: Flutter Build APK

on:
  push:
    branches: [main]

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=1 -Xmx6144m"
  _JAVA_OPTIONS: "-Xmx6144m -XX:MaxMetaspaceSize=2048m"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-licenses: true
          android-sdk-platform: 34
          build-tools-version: '34.0.0'
          cmake-version: '3.22.1'
          ndk-version: '25.2.9519653'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          cache: true
          cache-key: flutter-${{ hashFiles('**/pubspec.yaml') }}

      - name: Configure Build Environment
        run: |
          # Create Gradle properties
          mkdir -p ~/.gradle
          cat <<EOF > ~/.gradle/gradle.properties
          org.gradle.java.home=$JAVA_HOME
          android.jvmargs=-Xmx6144m
          org.gradle.jvmargs=-Xmx6144m -XX:+HeapDumpOnOutOfMemoryError
          org.gradle.daemon=false
          org.gradle.parallel=false
          # Disable build scans
          org.gradle.enterprise.url=https://gradle.com
          scan.capture-task-input-files=false
          scan.uploadInBackground=false
          EOF

          # Create local.properties
          echo "sdk.dir=$ANDROID_HOME" > android/local.properties
          echo "flutter.sdk=$FLUTTER_ROOT" >> android/local.properties
        shell: bash

      - name: Build APK
        run: |
          set -ex
          flutter clean
          flutter pub get
          
          # Build with maximum logging but without scan
          cd android && ./gradlew clean assembleRelease \
            --stacktrace \
            --info \
            --no-daemon \
            --no-build-cache \
            --no-parallel \
            > ../gradle.log 2>&1 || (cat ../gradle.log && exit 1)
          
          # Verify APK exists
          if [ ! -f "../build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "APK generation failed!"
            ls -la ../build/app/outputs/flutter-apk/
            exit 1
          fi
        shell: bash

      - name: Upload Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            gradle.log
            android/build/**/*.log
          retention-days: 7

      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7
