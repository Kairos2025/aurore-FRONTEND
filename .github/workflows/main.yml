name: Aurore Frontend CI/CD

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  WORKING_DIR: './aurore_frontend'
  FLUTTER_HOME: '${{ github.workspace }}/flutter'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install Flutter
        run: |
          # Download and extract Flutter
          FLUTTER_VERSION="3.19.5"
          wget https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${FLUTTER_VERSION}-stable.tar.xz
          tar xf flutter_linux_${FLUTTER_VERSION}-stable.tar.xz -C ${{ github.workspace }}
          
          # Configure PATH
          echo "${{ env.FLUTTER_HOME }}/bin" >> $GITHUB_PATH
          echo "FLUTTER_HOME=${{ env.FLUTTER_HOME }}" >> $GITHUB_ENV
          
          # Verify installation
          ${{ env.FLUTTER_HOME }}/bin/flutter --version

      - name: Verify Installation
        run: |
          echo "=== Flutter ==="
          flutter --version
          echo "=== Dart ==="
          dart --version
          echo "=== PATH ==="
          echo $PATH

      - name: Prepare Project
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Update SDK constraints
          sed -i \
            -e 's/sdk: ">=.*"/sdk: ">=3.7.0 <4.0.0"/' \
            -e 's/flutter: ">=.*"/flutter: ">=3.19.0"/' \
            pubspec.yaml

          # Set compatible dependencies
          sed -i \
            -e 's/firebase_core: .*/firebase_core: ^2.24.0/' \
            -e 's/firebase_auth: .*/firebase_auth: ^4.11.0/' \
            -e 's/flutter_svg: .*/flutter_svg: ^2.1.0/' \
            -e 's/http: .*/http: ^0.13.5/' \
            -e 's/material_color_utilities: .*/material_color_utilities: 0.11.1/' \
            pubspec.yaml

      - name: Resolve Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          flutter pub get --verbose || {
            flutter pub cache repair
            flutter pub get --verbose
          }

      - name: Build APK
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          flutter clean
          flutter build apk --release \
            --dart-define=CI_ENV=true \
            --split-debug-info=build/symbols/ \
            --obfuscate

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.WORKING_DIR }}/build/app/outputs/flutter-apk/app-release.apk
