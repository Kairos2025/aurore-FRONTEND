name: Flutter APK Build Pipeline

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.19.5'
  WORKING_DIR: './aurore_frontend'
  FLUTTER_HOME: '${{ github.workspace }}/flutter'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version checking

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Install Flutter
        id: install-flutter
        run: |
          # Download with retries in case of network issues
          for i in {1..3}; do
            wget -q --show-progress --progress=bar:force:noscroll \
              https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${FLUTTER_VERSION}-stable.tar.xz && break || sleep 15
          done
          
          # Verify checksum
          echo "665630904 flutter_linux_${FLUTTER_VERSION}-stable.tar.xz" | tee /tmp/flutter_checksum
          wc -c flutter_linux_${FLUTTER_VERSION}-stable.tar.xz | awk '{print $1 " " $2}' | diff - /tmp/flutter_checksum || exit 1
          
          # Extract and setup
          tar xf flutter_linux_${FLUTTER_VERSION}-stable.tar.xz -C ${{ github.workspace }}
          echo "${{ env.FLUTTER_HOME }}/bin" >> $GITHUB_PATH
          echo "FLUTTER_HOME=${{ env.FLUTTER_HOME }}" >> $GITHUB_ENV
          
          # Precache dependencies
          flutter precache --android

      - name: Verify Environment
        run: |
          flutter --version
          dart --version
          java -version
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "JAVA_HOME=$JAVA_HOME"

      - name: Prepare Project
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Set compatible SDK constraints
          sed -i \
            -e 's/sdk: ">=.*"/sdk: ">=3.3.0 <4.0.0"/' \
            -e 's/flutter: ">=.*"/flutter: ">=3.19.0"/' \
            pubspec.yaml

          # Pin known problematic packages
          for pkg in boolean_selector matcher test test_api coverage \
                    firebase_core firebase_auth flutter_svg http intl \
                    material_color_utilities; do
            current_version=$(grep -E "^  $pkg:" pubspec.yaml || echo "")
            if [ -n "$current_version" ]; then
              case $pkg in
                boolean_selector) version="^2.1.2" ;;
                matcher) version="^0.12.16" ;;
                test) version="^1.24.7" ;;
                test_api) version="^0.7.0" ;;
                coverage) version="^1.6.3" ;;
                firebase_core) version="^2.24.0" ;;
                firebase_auth) version="^4.11.0" ;;
                flutter_svg) version="^2.1.0" ;;
                http) version="^0.13.5" ;;
                intl) version="^0.18.1" ;;
                material_color_utilities) version="^0.11.1" ;;
              esac
              sed -i "s|^  $pkg:.*|  $pkg: $version|" pubspec.yaml
            fi
          done

      - name: Resolve Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          flutter pub cache repair
          flutter pub get --verbose
          flutter pub upgrade --major-versions

      - name: Run Flutter Doctor
        run: flutter doctor -v

      - name: Build APK
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          flutter clean
          flutter build apk --release \
            --dart-define=CI_ENV=true \
            --split-debug-info=build/symbols/ \
            --obfuscate \
            --no-sound-null-safety \
            --verbose

      - name: Verify Build Output
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "::error::APK not found at $APK_PATH"
            exit 1
          fi
          echo "APK size: $(du -h $APK_PATH | cut -f1)"

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.WORKING_DIR }}/build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ${{ env.WORKING_DIR }}/flutter_build.log
            ${{ env.WORKING_DIR }}/pub_get.log
          retention-days: 30
