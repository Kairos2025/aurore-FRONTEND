name: Aurore Frontend CI/CD

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  # Using a version known to exist in GitHub's runner cache
  FLUTTER_VERSION: '3.34.0'
  WORKING_DIR: './aurore_frontend'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
        continue-on-error: false

      - name: Install Flutter (with fallback)
        id: install-flutter
        continue-on-error: true
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Fallback to Channel Install
        if: steps.install-flutter.outcome != 'success'
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Verify Environment
        id: verify-env
        run: |
          # Check Flutter installation
          if ! command -v flutter &> /dev/null; then
            echo "::error::Flutter installation failed"
            exit 1
          fi
          
          # Verify versions
          echo "=== Versions ==="
          flutter --version || { echo "::error::Flutter version check failed"; exit 1; }
          dart --version || { echo "::error::Dart version check failed"; exit 1; }
          java -version || { echo "::error::Java version check failed"; exit 1; }
          
          # Check working directory exists
          if [ ! -d "${{ env.WORKING_DIR }}" ]; then
            echo "::error::Working directory ${{ env.WORKING_DIR }} not found"
            exit 1
          fi

      - name: Prepare Project
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: false
        run: |
          # Backup original pubspec
          cp pubspec.yaml pubspec.yaml.bak
          
          # Update SDK constraints
          DART_VERSION=$(dart --version | awk '{print $4}')
          echo "Setting SDK to Dart $DART_VERSION"
          sed -i "s/sdk: \">=.*\"/sdk: \">=$DART_VERSION <4.0.0\"/" pubspec.yaml
          
          # Set compatible dependencies
          sed -i \
            -e 's/material_color_utilities: .*/material_color_utilities: 0.11.1/' \
            -e 's/flutter_svg: .*/flutter_svg: ^2.1.0/' \
            -e 's/http: .*/http: ^1.1.0/' \
            -e 's/firebase_core: .*/firebase_core: ^4.3.0/' \
            -e 's/firebase_auth: .*/firebase_auth: ^6.3.0/' \
            -e 's/firebase_analytics: .*/firebase_analytics: ^11.4.5/' \
            pubspec.yaml
          
          # Verify changes
          if ! grep -q "sdk: \">=$DART_VERSION <4.0.0\"" pubspec.yaml; then
            echo "::error::Failed to update SDK version"
            mv pubspec.yaml.bak pubspec.yaml
            exit 1
          fi

      - name: Resolve Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: false
        run: |
          flutter pub get || {
            echo "::error::Dependency resolution failed"
            # Restore original pubspec if resolution fails
            mv pubspec.yaml.bak pubspec.yaml
            exit 1
          }
          
          # Verify no outdated dependencies causing issues
          flutter pub outdated || echo "::warning::Some dependencies may need updating"

      - name: Build APK
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: false
        run: |
          flutter clean
          flutter build apk --release \
            --dart-define=CI_ENV=true \
            --split-debug-info=build/symbols/ \
            --obfuscate || {
            echo "::error::Build failed"
            exit 1
          }
          
          # Verify APK exists
          if [ ! -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "::error::APK file not found"
            exit 1
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.WORKING_DIR }}/build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: error
        continue-on-error: false
