name: Flutter APK Builder (Exact Dart Version)

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  PROJECT_DIR: 'aurore_frontend'
  FLUTTER_VERSION: '3.16.9'
  FLUTTER_HOME: '/opt/flutter'
  DART_VERSION: '3.8.6'
  ENGINE_VERSION: 'f40e976bedff57e69e1b3d89a7c2a3c617a03dad'
  DART_SDK_URL: 'https://storage.googleapis.com/flutter_infra_release/flutter/${{ env.ENGINE_VERSION }}/dart-sdk-linux-x64.zip'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl git unzip xz-utils libglu1-mesa

      - name: Nuclear Clean
        run: |
          sudo rm -rf /usr/local/flutter
          sudo rm -rf /opt/hostedtoolcache/flutter
          sudo rm -rf ${{ env.FLUTTER_HOME }}
          sudo rm -rf ~/.flutter
          sudo rm -rf ~/.dart
          sudo rm -rf ~/.dart_server

      - name: Install Dart SDK First
        run: |
          mkdir -p ${{ env.FLUTTER_HOME }}/bin/cache
          echo "Downloading Dart SDK from: ${{ env.DART_SDK_URL }}"
          
          # Download with checksum verification
          for i in {1..5}; do
            curl -L ${{ env.DART_SDK_URL }} -o dart-sdk.zip && \
            unzip -t dart-sdk.zip && break || sleep 30
          done
          
          # Completely clean and install
          rm -rf ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk
          unzip -q dart-sdk.zip -d ${{ env.FLUTTER_HOME }}/bin/cache/
          
          # Force correct directory structure
          if [ -d "${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/dart-sdk" ]; then
            mv ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/dart-sdk ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk-temp
            rm -rf ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk
            mv ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk-temp ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk
          fi
          
          # Verify version from actual binary
          DART_ACTUAL=$(${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/bin/dart --version 2>&1 | head -1 | awk '{print $4}')
          echo "Extracted Dart version: $DART_ACTUAL"
          
          if [ "$DART_ACTUAL" != "${{ env.DART_VERSION }}" ]; then
            echo "::error::Downloaded SDK contains wrong Dart version! Actual: $DART_ACTUAL, Expected: ${{ env.DART_VERSION }}"
            echo "::error::Verify ENGINE_VERSION matches Flutter ${{ env.FLUTTER_VERSION }} requirements"
            exit 1
          fi
          
          rm dart-sdk.zip
          echo "${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/bin" >> $GITHUB_PATH

      - name: Install Flutter
        run: |
          git clone https://github.com/flutter/flutter.git -b ${{ env.FLUTTER_VERSION }} --depth 1 ${{ env.FLUTTER_HOME }}
          
          # Create version lock files
          echo "${{ env.FLUTTER_VERSION }}" > ${{ env.FLUTTER_HOME }}/version
          echo "engine.version=${{ env.ENGINE_VERSION }}" > ${{ env.FLUTTER_HOME }}/bin/internal/engine.version
          
          # Disable all updates
          cat > ${{ env.FLUTTER_HOME }}/bin/internal/update_dart_sdk.sh << 'EOL'
          #!/bin/sh
          echo "Dart SDK updates disabled by CI configuration"
          exit 0
          EOL
          chmod +x ${{ env.FLUTTER_HOME }}/bin/internal/update_dart_sdk.sh
          
          echo "${{ env.FLUTTER_HOME }}/bin" >> $GITHUB_PATH

      - name: Force Dart Version
        run: |
          # Create direct symlinks to bypass any Flutter path logic
          ln -sf ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/bin/dart /usr/local/bin/dart
          ln -sf ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/bin/dart ${{ env.FLUTTER_HOME }}/bin/dart
          
          # Final verification
          echo "Final Dart version check:"
          dart --version
          if ! dart --version 2>&1 | grep -q "${{ env.DART_VERSION }}"; then
            echo "::error::Critical version mismatch after installation!"
            exit 1
          fi

      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get
          flutter build apk --release --shrink

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
