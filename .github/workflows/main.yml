name: Aurore Frontend CI/CD

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.29.3'
  PROJECT_DIR: 'aurore_frontend'
  REQUIRED_DART_VERSION: "3.8.0"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install Base Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install Correct Dart Version
        run: |
          # Function to download Dart with multiple fallbacks
          download_dart() {
            local version=$1
            local mirrors=(
              "https://storage.googleapis.com/dart-archive/channels/stable/release/$version/sdk/dartsdk-linux-x64-release.zip"
              "https://github.com/dart-lang/sdk/releases/download/$version/dartsdk-linux-x64-release.zip"
              "https://mirrors.tuna.tsinghua.edu.cn/dart-archive/channels/stable/release/$version/sdk/dartsdk-linux-x64-release.zip"
            )
            
            for url in "${mirrors[@]}"; do
              echo "Trying: $url"
              if wget --tries=3 --timeout=30 "$url" -O dart-sdk.zip; then
                echo "Download successful from $url"
                return 0
              fi
              echo "Download failed, trying next mirror..."
              sleep 1
            done
            return 1
          }

          # Known working versions in order of preference
          KNOWN_VERSIONS=("3.8.6" "3.9.0" "3.10.0" "3.8.0")

          # Try to install a known working version
          for version in "${KNOWN_VERSIONS[@]}"; do
            if download_dart "$version"; then
              echo "Successfully downloaded Dart $version"
              unzip -q dart-sdk.zip -d ~/dart-sdk
              export PATH="$HOME/dart-sdk/dart-sdk/bin:$PATH"
              
              # Verify installation
              INSTALLED_VERSION=$(dart --version 2>&1 | awk '{print $4}')
              if [ "$(printf '%s\n' "${{ env.REQUIRED_DART_VERSION }}" "$INSTALLED_VERSION" | sort -V | head -n1)" = "${{ env.REQUIRED_DART_VERSION }}" ]; then
                echo "Verified Dart $INSTALLED_VERSION meets requirements"
                exit 0
              else
                echo "Downloaded version $INSTALLED_VERSION doesn't meet requirements"
                continue
              fi
            fi
          done

          echo "::error::All download attempts failed"
          exit 1

      - name: Configure Environment
        run: |
          flutter precache --force
          echo "=== Environment Verification ==="
          echo "Flutter: $(flutter --version)"
          echo "Dart: $(dart --version)"
          echo "Java: $(java -version 2>&1 | head -n1)"

      - name: Setup Android
        run: |
          mkdir -p ~/.android
          touch ~/.android/repositories.cfg
          yes | sdkmanager --licenses || true
          flutter doctor --android-licenses

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            clang \
            cmake \
            ninja-build \
            pkg-config \
            liblzma-dev

      - name: Resolve Dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get

      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter build apk --release \
            --no-sound-null-safety \
            --dart-define=CI_ENV=true \
            --split-debug-info=build/symbols/ \
            --obfuscate

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
