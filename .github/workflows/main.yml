name: Flutter Build APK

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Project Structure
        run: |
          echo "Project structure:"
          ls -la
          echo "Android directory contents:"
          ls -la android/ || echo "No android directory found"
        shell: bash

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-licenses: true
          android-sdk-platform: 34
          build-tools-version: 34.0.0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          cache: true
          cache-key: flutter-${{ hashFiles('**/pubspec.yaml') }}

      - name: Recreate Android Directory
        run: |
          if [ -d "android" ]; then
            rm -rf android
          fi
          flutter create --platforms android --project-name my_app .
        shell: bash

      - name: Fix Gradle Configuration
        run: |
          mkdir -p ~/.gradle
          echo "org.gradle.java.home=$JAVA_HOME" > ~/.gradle/gradle.properties
          echo "android.jvmargs=-Xmx6144m" >> ~/.gradle/gradle.properties
          echo "org.gradle.jvmargs=-Xmx6144m -XX:+HeapDumpOnOutOfMemoryError -XX:MaxMetaspaceSize=512m" >> ~/.gradle/gradle.properties
          echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
          echo "org.gradle.parallel=false" >> ~/.gradle/gradle.properties
        shell: bash

      - name: Accept Android Licenses
        run: |
          yes | sdkmanager --licenses || true
        shell: bash

      - name: Setup Keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > android/app/my-release-key.jks
          echo "storeFile=my-release-key.jks" > android/key.properties
          echo "storePassword=$KEYSTORE_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
        shell: bash

      - name: Flutter Build Preparation
        run: |
          flutter doctor -v
          flutter pub get
          cd android && ./gradlew clean && cd ..
        shell: bash

      - name: Build APK
        run: |
          flutter build apk --release --verbose > build.log 2>&1 || (cat build.log && exit 1)
        shell: bash

      - name: Upload Build Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: build.log
          retention-days: 7

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7
