name: Flutter APK Builder (No Auto-Download)

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  PROJECT_DIR: 'aurore_frontend'
  FLUTTER_VERSION: '3.16.9'
  FLUTTER_HOME: '/opt/flutter'
  DART_VERSION: '3.8.6'
  DART_SDK_URL: 'https://storage.googleapis.com/flutter_infra_release/flutter/f40e976bedff57e69e1b3d89a7c2a3c617a03dad/dart-sdk-linux-x64.zip'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl git unzip

      - name: Install Flutter Base
        run: |
          # Clean environment
          sudo rm -rf /usr/local/flutter
          sudo rm -rf /opt/hostedtoolcache/flutter
          
          # Clone Flutter
          git clone https://github.com/flutter/flutter.git -b ${{ env.FLUTTER_VERSION }} --depth 1 ${{ env.FLUTTER_HOME }}
          
          # Add to PATH
          echo "${{ env.FLUTTER_HOME }}/bin" >> $GITHUB_PATH

      - name: Install Dart SDK
        run: |
          # Remove existing Dart SDK
          sudo rm -rf ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk
          
          # Download Dart SDK with retry logic
          for i in {1..3}; do
            wget ${{ env.DART_SDK_URL }} -O dart-sdk.zip && break || sleep 30
          done
          
          # Verify download
          if ! unzip -t dart-sdk.zip; then
            echo "::error::Downloaded Dart SDK is corrupt"
            exit 1
          fi
          
          # Extract to cache directory
          unzip dart-sdk.zip -d ${{ env.FLUTTER_HOME }}/bin/cache/
          
          # Handle nested directory if exists
          if [ -d "${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/dart-sdk" ]; then
            mv ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/dart-sdk ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk-temp
            rm -rf ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk
            mv ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk-temp ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk
          fi
          
          rm dart-sdk.zip
          echo "${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/bin" >> $GITHUB_PATH

      - name: Patch Flutter Tool
        run: |
          # Disable SDK update completely
          sed -i 's/return _downloadSdkZip(requiredSdk, dartSdkPath)/return true # Disabled auto-download/' ${{ env.FLUTTER_HOME }}/bin/internal/update_dart_sdk.dart
          
          # Create minimal engine.version file
          echo "engine.version=f40e976bedff57e69e1b3d89a7c2a3c617a03dad" > ${{ env.FLUTTER_HOME }}/bin/internal/engine.version

      - name: Verify Installation
        run: |
          ${{ env.FLUTTER_HOME }}/bin/dart --version
          DART_ACTUAL=$(${{ env.FLUTTER_HOME }}/bin/dart --version 2>&1 | awk '{print $4}')
          
          if [ "$DART_ACTUAL" != "${{ env.DART_VERSION }}" ]; then
            echo "::error::Dart version mismatch! Actual: $DART_ACTUAL, Required: ${{ env.DART_VERSION }}"
            exit 1
          fi

      - name: Setup Android
        run: |
          mkdir -p ~/.android
          touch ~/.android/repositories.cfg
          yes | ${{ env.FLUTTER_HOME }}/bin/sdkmanager --licenses || echo "License acceptance continued despite errors"
          yes | ${{ env.FLUTTER_HOME }}/bin/flutter doctor --android-licenses || echo "Android licenses continued despite errors"

      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          ${{ env.FLUTTER_HOME }}/bin/flutter pub get
          ${{ env.FLUTTER_HOME }}/bin/flutter build apk --release --shrink

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
