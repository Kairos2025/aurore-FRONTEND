name: Build APK and IPA

on:
  push:
    branches:
      - update-gradle
  pull_request:
    branches:
      - update-gradle

jobs:
  fetch-flutter-version:
    runs-on: ubuntu-latest
    outputs:
      flutter_version: ${{ steps.set-flutter-version.outputs.flutter_version }}
    steps:
      - name: Set Flutter version
        id: set-flutter-version
        run: |
          echo "Using Flutter version 3.29.3 (matches pubspec.yaml and logs)"
          echo "flutter_version=3.29.3" >> $GITHUB_OUTPUT

  build-android:
    needs: fetch-flutter-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: aurore-FRONTEND

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2.8.0
        with:
          flutter-version: ${{ needs.fetch-flutter-version.outputs.flutter_version }}
          channel: 'stable'
          architecture: 'x64'

      - name: Verify Flutter setup
        run: |
          flutter doctor -v || { echo "Error: Flutter setup failed"; exit 1; }
          flutter --version || { echo "Error: Flutter not found"; exit 1; }
          dart --version || { echo "Error: Dart not found"; exit 1; }
          dart_version=$(dart --version 2>&1 | grep -o '[0-9]+\.[0-9]+\.[0-9]+')
          echo "Dart version: $dart_version"

      - name: Check Flutter doctor for Android issues
        run: |
          flutter doctor --android-licenses
          flutter doctor | grep -i "android" || { echo "Error: Android toolchain issues detected"; exit 1; }

      - name: Accept Android licenses
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          yes | flutter doctor --android-licenses || { echo "Error: Failed to accept Android licenses"; exit 1; }

      - name: Verify directory
        run: |
          pwd
          ls -la .
          if [ -d "./aurore-FRONTEND" ]; then
            echo "Found aurore-FRONTEND directory"
            cd ./aurore-FRONTEND
            ls -la .
            if [ -d "./aurore_frontend" ]; then
              echo "Found aurore_frontend directory"
              cd ./aurore_frontend
              ls -la .
              if [ -f "pubspec.yaml" ]; then
                echo "Found pubspec.yaml in aurore_frontend"
              else
                echo "Error: pubspec.yaml not found in aurore_frontend"; exit 1
              fi
            else
              echo "Error: aurore_frontend directory not found"; exit 1
            fi
          else
            echo "Error: aurore-FRONTEND directory not found"; exit 1
          fi

      - name: Install dependencies
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          flutter pub get || { echo "Error: Failed to get dependencies"; echo "pubspec.yaml content:"; cat pubspec.yaml; exit 1; }

      - name: Set up Android signing
        working-directory: ./aurore-FRONTEND/aurore_frontend
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/keystore.jks
          cat > android/key.properties <<EOF
          storePassword=$ANDROID_KEYSTORE_PASSWORD
          keyPassword=$ANDROID_KEY_PASSWORD
          keyAlias=$ANDROID_KEY_ALIAS
          storeFile=keystore.jks
          EOF
          echo "Android signing setup complete"

      - name: Update build.gradle.kts for release signing
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          cat > android/app/build.gradle.kts <<EOF
          plugins {
              id("com.android.application")
              id("org.jetbrains.kotlin.android")
              id("com.google.gms.google-services")
          }

          android {
              namespace = "com.example.aurore_frontend"
              compileSdk = flutter.compileSdkVersion
              ndkVersion = "27.0.12077973"

              compileOptions {
                  sourceCompatibility = JavaVersion.VERSION_11
                  targetCompatibility = JavaVersion.VERSION_11
              }

              kotlinOptions {
                  jvmTarget = JavaVersion.VERSION_11.toString()
              }

              defaultConfig {
                  applicationId = "com.example.aurore_frontend"
                  minSdk = flutter.minSdkVersion
                  targetSdk = flutter.targetSdkVersion
                  versionCode = flutter.versionCode
                  versionName = flutter.versionName
              }

              signingConfigs {
                  register("release") {
                      keyAlias = System.getenv("ANDROID_KEY_ALIAS")
                      keyPassword = System.getenv("ANDROID_KEY_PASSWORD")
                      storeFile = file("keystore.jks")
                      storePassword = System.getenv("ANDROID_KEYSTORE_PASSWORD")
                  }
              }

              buildTypes {
                  release {
                      signingConfig = signingConfigs.getByName("release")
                  }
              }
          }

          flutter {
              source = "../.."
          }
          EOF
          echo "Updated android/app/build.gradle.kts with release signing"

      - name: Build APK
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          flutter build apk --release || { echo "Error: APK build failed"; cat android/app/build.gradle.kts; exit 1; }

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: aurore-FRONTEND/aurore_frontend/build/app/outputs/flutter-apk/app-release.apk

  build-ios:
    needs: fetch-flutter-version
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: aurore-FRONTEND

      - name: Set up Flutter
        uses: subosito/flutter-action@v2.8.0
        with:
          flutter-version: ${{ needs.fetch-flutter-version.outputs.flutter_version }}
          channel: 'stable'
          architecture: 'x64'

      - name: Verify Flutter setup
        run: |
          flutter doctor -v || { echo "Error: Flutter setup failed"; exit 1; }
          flutter --version || { echo "Error: Flutter not found"; exit 1; }
          dart --version || { echo "Error: Dart not found"; exit 1; }
          dart_version=$(dart --version 2>&1 | grep -o '[0-9]+\.[0-9]+\.[0-9]+')
          echo "Dart version: $dart_version"

      - name: Install dependencies
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          flutter pub get || { echo "Error: Failed to get dependencies"; echo "pubspec.yaml content:"; cat pubspec.yaml; exit 1; }

      - name: Set up Ruby and CocoaPods
        run: |
          gem install cocoapods
          pod --version

      - name: Install CocoaPods dependencies
        working-directory: ./aurore-FRONTEND/aurore_frontend/ios
        run: |
          pod install || { echo "Error: Failed to install CocoaPods dependencies"; exit 1; }

      - name: Set up code signing
        working-directory: ./aurore-FRONTEND/aurore_frontend
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          sed -i '' 's/Automatic/Manual/' ios/Runner.xcodeproj/project.pbxproj
          echo "Code signing setup complete"

      - name: Build IPA
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          flutter build ios --release --no-codesign || { echo "Error: iOS build failed"; exit 1; }
          cd ios
          xcodebuild -workspace Runner.xcworkspace -scheme Runner -sdk iphoneos -configuration Release archive -archivePath build/Runner.xcarchive
          xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportOptionsPlist ../exportOptions.plist -exportPath build/ipa
          echo "IPA built at build/ipa/Runner.ipa"

      - name: Create exportOptions.plist
        working-directory: ./aurore-FRONTEND/aurore_frontend
        run: |
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>development</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
          </dict>
          </plist>
          EOF
          echo "Created exportOptions.plist"

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: Runner.ipa
          path: aurore-FRONTEND/aurore_frontend/ios/build/ipa/Runner.ipa
