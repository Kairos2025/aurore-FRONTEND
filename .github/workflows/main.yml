name: Aurore Frontend CI/CD

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.29.3'  # Known stable version
  PROJECT_DIR: 'aurore_frontend'
  REQUIRED_DART_VERSION: "3.8.0"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install Base Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install Correct Dart Version
        run: |
          # Function to find available Dart version
          find_dart_version() {
            local required_ver=$1
            echo "Searching for Dart version >= $required_ver..."
            
            # Get list of available versions
            versions=$(curl -s https://storage.googleapis.com/dart-archive/channels/stable/release/releases.json | jq -r '.releases[].version' | sort -V)
            
            for ver in $versions; do
              if [ "$(printf '%s\n' "$required_ver" "$ver" | sort -V | head -n1)" = "$required_ver" ]; then
                echo "Found suitable Dart version: $ver"
                echo "$ver" > dart_version.txt
                return 0
              fi
            done
            
            echo "::error::No suitable Dart version found (needed >= $required_ver)"
            return 1
          }

          # Find and install correct Dart version
          if find_dart_version ${{ env.REQUIRED_DART_VERSION }}; then
            DART_VERSION=$(cat dart_version.txt)
            echo "Installing Dart $DART_VERSION..."
            
            # Download and extract Dart SDK
            wget https://storage.googleapis.com/dart-archive/channels/stable/release/$DART_VERSION/sdk/dartsdk-linux-x64-release.zip -O dart-sdk.zip
            unzip -q dart-sdk.zip -d ~/dart-sdk
            export PATH="$HOME/dart-sdk/dart-sdk/bin:$PATH"
            
            # Verify installation
            echo "Installed Dart version: $(dart --version 2>&1 | head -n1)"
          else
            echo "::error::Failed to find suitable Dart version"
            exit 1
          fi

      - name: Configure Flutter Environment
        run: |
          # Ensure Flutter uses our Dart installation
          flutter precache --force
          flutter doctor -v
          
          # Verify versions
          echo "=== Environment Summary ==="
          echo "Flutter: $(flutter --version)"
          echo "Dart: $(dart --version)"
          echo "Java: $(java -version 2>&1 | head -n1)"

      - name: Setup Android Environment
        run: |
          mkdir -p ~/.android
          touch ~/.android/repositories.cfg
          yes | sdkmanager --licenses || true
          flutter doctor --android-licenses

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            clang \
            cmake \
            ninja-build \
            pkg-config \
            liblzma-dev

      - name: Resolve Dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get

      - name: Build Release APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter build apk --release \
            --no-sound-null-safety \
            --dart-define=CI_ENV=true \
            --split-debug-info=build/symbols/ \
            --obfuscate

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
