name: Flutter Build Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build-type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release
          - profile

env:
  FLUTTER_VERSION: '3.22.2'  # Contains Dart 3.5.0+
  PROJECT_DIR: 'aurore_frontend'

jobs:
  setup:
    name: Verify Environment
    runs-on: ubuntu-latest
    outputs:
      valid: ${{ steps.verify.outputs.valid }}
      flutter-version: ${{ steps.flutter-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        id: flutter-version
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          cache-key: flutter-${{ env.FLUTTER_VERSION }}

      - name: Verify project structure
        id: verify
        run: |
          echo "Repository contents:"
          ls -la
          
          if [ ! -f "$PROJECT_DIR/pubspec.yaml" ]; then
            echo "::error::pubspec.yaml is missing in $PROJECT_DIR!"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "valid=true" >> $GITHUB_OUTPUT
          echo "version=${{ env.FLUTTER_VERSION }}" >> $GITHUB_OUTPUT

  android:
    name: Android Build
    needs: setup
    if: ${{ needs.setup.outputs.valid == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ needs.setup.outputs.flutter-version }}
          channel: 'stable'
          cache: true
          cache-key: flutter-${{ needs.setup.outputs.flutter-version }}

      - name: Verify Dart version
        run: flutter --version

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Install Dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get

      - name: Build Android APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter build apk --${{ github.event.inputs.build-type || 'release' }} \
            --dart-define=APP_ENV=${{ github.event.inputs.build-type || 'release' }}

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ github.event.inputs.build-type || 'release' }}
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-*.apk

  ios:
    name: iOS Build
    needs: setup
    if: ${{ needs.setup.outputs.valid == 'true' }}
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ needs.setup.outputs.flutter-version }}
          channel: 'stable'
          cache: true
          cache-key: flutter-${{ needs.setup.outputs.flutter-version }}

      - name: Verify Dart version
        run: flutter --version

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod setup

      - name: Install Dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get
          cd ios && pod install --repo-update

      - name: Set up Code Signing
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          # Import certificate
          echo "$BUILD_CERTIFICATE_BASE64" | base64 --decode > build_certificate.p12
          security import build_certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign

          # Import provisioning profile
          echo "$PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          rm profile.mobileprovision

          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Build iOS IPA
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter build ipa --${{ github.event.inputs.build-type || 'release' }} \
            --dart-define=APP_ENV=${{ github.event.inputs.build-type || 'release' }} \
            --export-options-plist=ios/ExportOptions.plist

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ github.event.inputs.build-type || 'release' }}
          path: ${{ env.PROJECT_DIR }}/build/ios/ipa/*.ipa
