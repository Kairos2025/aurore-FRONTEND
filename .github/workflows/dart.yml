name: CI - Build Aurore App

on:
  push:
    branches: [main, feature, dev]
  pull_request:
    branches: [main, feature, dev]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: macos-latest  # Focus on macOS for iOS builds

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log initial environment details
      - name: Log environment details
        run: |
          echo "Runner OS: $RUNNER_OS"
          echo "Runner Name: $RUNNER_NAME"
          echo "Current directory: $(pwd)"
          echo "GitHub Context: ${{ toJson(github) }}"
          echo "Workflow started at: $(date)"

      # Step 3: Set up Java for Android builds
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
        continue-on-error: true

      # Step 4: Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.0'
          channel: 'stable'
        continue-on-error: true

      # Step 5: Verify environment and pubspec.yaml
      - name: Verify environment and project
        run: |
          echo "Flutter doctor output:"
          flutter doctor --verbose || echo "Flutter doctor failed, check logs."
          flutter --version || echo "Flutter version check failed."
          flutter pub get --verbose || echo "Dependency installation failed."
          if [ ! -f pubspec.yaml ]; then echo "Error: pubspec.yaml not found in $(pwd)"; exit 1; fi
          echo "pubspec.yaml found at: $(pwd)/pubspec.yaml"

      # Step 6: Run Dart analysis
      - name: Run Dart analysis
        run: |
          flutter analyze --no-fatal-infos > analysis_output.txt 2>&1 || echo "Dart analysis failed, proceeding."
        continue-on-error: true
        working-directory: ${{ github.workspace }}  # Ensure root directory

      # Step 7: Upload analysis output
      - name: Upload Dart analysis output
        uses: actions/upload-artifact@v4
        with:
          name: dart-analysis-output
          path: analysis_output.txt
          if-no-files-found: warn
        continue-on-error: true

      # Step 8: Run tests
      - name: Run tests
        run: |
          flutter test --coverage || echo "Tests failed or not found."
        continue-on-error: true
        working-directory: ${{ github.workspace }}

      # Step 9: Build APK
      - name: Build APK
        run: flutter build apk --release || echo "APK build failed."
        continue-on-error: true
        working-directory: ${{ github.workspace }}

      # Step 10: Build IPA with error handling
      - name: Build IPA
        run: |
          flutter build ios --release --no-codesign || echo "iOS build failed."
          if [ -d "build/ios/iphoneos" ]; then
            cd build/ios/iphoneos
            mkdir -p Payload
            mv Runner.app Payload/ 2>/dev/null || echo "Runner.app not found."
            zip -r aurore.ipa Payload 2>/dev/null || echo "IPA creation failed."
          else
            echo "iOS build directory not found."
          fi
        continue-on-error: true
        working-directory: ${{ github.workspace }}

      # Step 11: Upload APK artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: aurore-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: warn
        continue-on-error: true

      # Step 12: Upload IPA artifact
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: aurore-ipa
          path: build/ios/iphoneos/aurore.ipa
          if-no-files-found: ignore
        continue-on-error: true

      # Step 13: Log completion
      - name: Log completion
        run: |
          echo "Workflow completed at: $(date)"
          echo "Job status: ${{ job.status }}"
