plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

// Load local.properties to get flutterVersionCode and flutterVersionName
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
} else {
    throw new GradleException("local.properties file not found. Ensure 'flutter pub get' has been run.")
}

// Define versionCode and versionName with fallback values
def flutterVersionCode = localProperties.getProperty('flutterVersionCode')
def flutterVersionName = localProperties.getProperty('flutterVersionName')

// Validate and set fallback values
if (!flutterVersionCode) {
    println "flutterVersionCode not found in local.properties. Using fallback value: 1"
    flutterVersionCode = "1"
}
if (!flutterVersionName) {
    println "flutterVersionName not found in local.properties. Using fallback value: 1.0.0"
    flutterVersionName = "1.0.0"
}

// Load key.properties for signing configuration
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
}

android {
    namespace = "com.yourcompany.aurore"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    // Define signing configuration for release builds
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    defaultConfig {
        applicationId = "com.yourcompany.aurore"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            signingConfig = signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    // No app-level dependencies needed for a standard Flutter project
}
