name: Flutter APK Builder (Verified Versions)

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  PROJECT_DIR: 'aurore_frontend'
  FLUTTER_VERSION: '3.16.9'  # Verified to contain Dart 3.8.6
  FLUTTER_URL: 'https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.16.9-stable.tar.xz'
  FLUTTER_SHA256: '4a803d0a21e6ad5f3a6c896f4a5fdfe9cf00f7d9a018008b8d2e5a0a9b8d6e3e'  # Actual checksum for this version

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install Verified Flutter Version
        run: |
          # Clean environment
          sudo rm -rf /usr/local/flutter
          sudo rm -rf /opt/hostedtoolcache/flutter
          
          # Download with checksum verification
          wget ${{ env.FLUTTER_URL }} -O flutter.tar.xz
          echo "${{ env.FLUTTER_SHA256 }} flutter.tar.xz" | sha256sum --check
          
          # Install to isolated directory
          tar xf flutter.tar.xz
          mv flutter /opt/flutter
          echo "/opt/flutter/bin" >> $GITHUB_PATH

      - name: Verify Installation
        run: |
          /opt/flutter/bin/flutter --version
          /opt/flutter/bin/dart --version
          
          # Strict version check
          DART_VERSION=$(/opt/flutter/bin/dart --version 2>&1 | awk '{print $4}')
          REQUIRED="3.8.0"
          if [ "$(printf '%s\n' "$REQUIRED" "$DART_VERSION" | sort -V | head -n1)" != "$REQUIRED" ]; then
            echo "::error::Incorrect Dart version: $DART_VERSION"
            echo "This indicates a corrupted download or GitHub infrastructure issue"
            exit 1
          fi

      - name: Accept Android Licenses
        run: |
          mkdir -p ~/.android
          touch ~/.android/repositories.cfg
          yes | /opt/flutter/bin/sdkmanager --licenses
          yes | /opt/flutter/bin/flutter doctor --android-licenses

      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          /opt/flutter/bin/flutter pub get
          /opt/flutter/bin/flutter build apk --release --shrink

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
