name: Flutter Build Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      build-type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release
          - profile

env:
  FLUTTER_VERSION: '3.22.4'  # Confirmed working version
  PROJECT_DIR: 'aurore_frontend'
  BUILD_CACHE_KEY: ${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  setup:
    name: Setup and Validate
    runs-on: ubuntu-latest
    outputs:
      setup-complete: ${{ steps.validate.outputs.valid }}
      flutter-version: ${{ steps.install-flutter.outputs.flutter-version }}
      dart-version: ${{ steps.install-flutter.outputs.dart-version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Flutter (with fallback)
        id: install-flutter
        continue-on-error: false
        run: |
          # Try specified version first
          echo "Attempting to install Flutter ${{ env.FLUTTER_VERSION }}"
          flutter_version=${{ env.FLUTTER_VERSION }}
          
          # Setup Flutter using direct download as fallback
          FLUTTER_DIR="$HOME/flutter"
          mkdir -p "$FLUTTER_DIR"
          echo "FLUTTER_HOME=$FLUTTER_DIR" >> $GITHUB_ENV
          echo "$FLUTTER_DIR/bin" >> $GITHUB_PATH
          
          # Download Flutter
          FLUTTER_URL="https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_$flutter_version-stable.tar.xz"
          echo "Downloading Flutter from $FLUTTER_URL"
          
          if ! curl --fail -L "$FLUTTER_URL" -o flutter.tar.xz; then
            echo "::warning::Failed to download specified version, trying latest stable"
            FLUTTER_URL="https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_$(curl -s https://storage.googleapis.com/flutter_infra_release/releases/releases_linux.json | jq -r '.current_release' | sed 's/^v//')-stable.tar.xz"
            curl --fail -L "$FLUTTER_URL" -o flutter.tar.xz || {
              echo "::error::Failed to download Flutter SDK"
              exit 1
            }
          fi
          
          tar -xf flutter.tar.xz -C "$FLUTTER_DIR" --strip-components=1
          rm flutter.tar.xz
          
          # Verify installation
          flutter --version || {
            echo "::error::Flutter installation failed"
            exit 1
          }
          
          # Get versions
          FLUTTER_VER=$(flutter --version | awk '/Flutter/{print $2}')
          DART_VER=$(dart --version | awk '{print $4}')
          
          echo "flutter-version=$FLUTTER_VER" >> $GITHUB_OUTPUT
          echo "dart-version=$DART_VER" >> $GITHUB_OUTPUT
          echo "Installed Flutter $FLUTTER_VER with Dart $DART_VER"

      - name: Validate Environment
        id: validate
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # Verify project structure
          if [ ! -f "pubspec.yaml" ]; then
            echo "::error::pubspec.yaml not found in $PROJECT_DIR!"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Verify Dart version
          REQUIRED_DART=$(grep 'sdk:' pubspec.yaml | awk '{print $2}' | tr -d "'\"" | cut -c2-)
          CURRENT_DART=${{ steps.install-flutter.outputs.dart-version }}

          if [ "$(printf '%s\n' "$REQUIRED_DART" "$CURRENT_DART" | sort -V | head -n1)" != "$REQUIRED_DART" ]; then
            echo "::error::Dart SDK $CURRENT_DART < required $REQUIRED_DART"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "valid=true" >> $GITHUB_OUTPUT

  android:
    name: Android Build
    needs: setup
    if: ${{ needs.setup.outputs.setup-complete == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter from previous step
        run: |
          echo "${{ env.FLUTTER_HOME }}/bin" >> $GITHUB_PATH
          flutter --version

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Restore Dependency Cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.PROJECT_DIR }}/.dart_tool
            ${{ env.PROJECT_DIR }}/.flutter-plugins
            ${{ env.PROJECT_DIR }}/.flutter-plugins-dependencies
            ${{ env.PROJECT_DIR }}/.pub-cache
          key: flutter-deps-${{ env.BUILD_CACHE_KEY }}
          restore-keys: |
            flutter-deps-

      - name: Install Dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub upgrade
          flutter pub get

      - name: Run Flutter Doctor
        run: flutter doctor -v

      - name: Run Flutter Analyzer
        working-directory: ${{ env.PROJECT_DIR }}
        run: flutter analyze

      - name: Build Android APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter build apk --${{ github.event.inputs.build-type || 'release' }} \
            --dart-define=APP_ENV=${{ github.event.inputs.build-type || 'release' }} \
            --verbose

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ github.event.inputs.build-type || 'release' }}-apk
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-*.apk

  ios:
    name: iOS Build
    needs: setup
    if: ${{ needs.setup.outputs.setup-complete == 'true' }}
    runs-on: macos-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter from previous step
        run: |
          echo "${{ env.FLUTTER_HOME }}/bin" >> $GITHUB_PATH
          flutter --version

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod setup

      - name: Restore Dependency Cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.PROJECT_DIR }}/.dart_tool
            ${{ env.PROJECT_DIR }}/.flutter-plugins
            ${{ env.PROJECT_DIR }}/.flutter-plugins-dependencies
            ${{ env.PROJECT_DIR }}/.pub-cache
            ${{ env.PROJECT_DIR }}/ios/Pods
          key: flutter-ios-deps-${{ env.BUILD_CACHE_KEY }}
          restore-keys: |
            flutter-ios-deps-

      - name: Install Dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get
          cd ios && pod install --repo-update

      - name: Set up Code Signing
        if: ${{ github.event.inputs.build-type == 'release' || github.event_name == 'push' }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          # Import certificate
          echo "$BUILD_CERTIFICATE_BASE64" | base64 --decode > build_certificate.p12
          security import build_certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign

          # Import provisioning profile
          echo "$PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          rm profile.mobileprovision

          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Build iOS IPA
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter build ipa --${{ github.event.inputs.build-type || 'release' }} \
            --dart-define=APP_ENV=${{ github.event.inputs.build-type || 'release' }} \
            --export-options-plist=ios/ExportOptions.plist \
            --verbose

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ github.event.inputs.build-type || 'release' }}-ipa
          path: ${{ env.PROJECT_DIR }}/build/ios/ipa/*.ipa
