name: Aurore Frontend CI/CD

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.22.0'
  PROJECT_DIR: 'aurore_frontend'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Create Compatible Configuration
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # Extract project metadata
          PROJECT_NAME=$(grep '^name:' pubspec.yaml | sed 's/^name: *//')
          PROJECT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/^version: *//' || echo '1.0.0+1')
          PROJECT_DESCRIPTION=$(grep '^description:' pubspec.yaml | sed 's/^description: *//' || echo '')

          # Create new pubspec.yaml with exact versions
          cat << EOF > pubspec.yaml
          name: $PROJECT_NAME
          description: $PROJECT_DESCRIPTION
          version: $PROJECT_VERSION

          environment:
            sdk: ">=3.4.0 <4.0.0"
            flutter: ">=3.22.0 <4.0.0"

          dependencies:
            flutter:
              sdk: flutter
            firebase_core: "2.24.0"
            firebase_auth: "4.11.0"
            test: "1.24.0"
            material_color_utilities: "0.8.0"
          EOF

          # Add other non-conflicting dependencies
          grep -A 100 '^dependencies:' pubspec.yaml.bak | \
          grep -vE 'flutter|firebase_core|firebase_auth|test|material_color_utilities' | \
          grep -v '^dependencies:' >> pubspec.yaml

          # Add dev dependencies if they exist
          if grep -q '^dev_dependencies:' pubspec.yaml.bak; then
            echo "dev_dependencies:" >> pubspec.yaml
            grep -A 100 '^dev_dependencies:' pubspec.yaml.bak | \
            grep -v '^dev_dependencies:' >> pubspec.yaml
          fi

          # Add flutter configuration if it exists
          if grep -q '^flutter:' pubspec.yaml.bak; then
            echo "flutter:" >> pubspec.yaml
            grep -A 100 '^flutter:' pubspec.yaml.bak | \
            grep -v '^flutter:' >> pubspec.yaml
          fi

          echo "Final pubspec.yaml:"
          cat pubspec.yaml

      - name: Resolve Dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter clean
          flutter pub get

      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -e
          flutter build apk --release \
            --no-sound-null-safety \
            --dart-define=CI_ENV=true \
            --split-debug-info=build/symbols/ \
            --obfuscate

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
