name: Aurore Frontend CI/CD

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.22.0'
  PROJECT_DIR: 'aurore_frontend'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Create Compatible Configuration
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # Create backup
          cp pubspec.yaml pubspec.backup.yaml

          # Extract project metadata
          PROJECT_NAME=$(grep '^name:' pubspec.yaml | sed 's/^name: *//')
          PROJECT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/^version: *//' || echo '1.0.0+1')
          PROJECT_DESCRIPTION=$(grep '^description:' pubspec.yaml | sed 's/^description: *//' || echo '')

          # Start building new pubspec.yaml
          echo "name: $PROJECT_NAME" > pubspec.yaml
          echo "description: $PROJECT_DESCRIPTION" >> pubspec.yaml
          echo "version: $PROJECT_VERSION" >> pubspec.yaml
          echo "" >> pubspec.yaml
          echo "environment:" >> pubspec.yaml
          echo "  sdk: \">=3.4.0 <4.0.0\"" >> pubspec.yaml
          echo "  flutter: \">=3.22.0 <4.0.0\"" >> pubspec.yaml
          echo "" >> pubspec.yaml
          echo "dependencies:" >> pubspec.yaml
          echo "  flutter:" >> pubspec.yaml
          echo "    sdk: flutter" >> pubspec.yaml
          echo "  firebase_core: \"2.24.0\"" >> pubspec.yaml
          echo "  firebase_auth: \"4.11.0\"" >> pubspec.yaml
          echo "  test: \"1.24.0\"" >> pubspec.yaml
          echo "  material_color_utilities: \"0.8.0\"" >> pubspec.yaml

          # Add other non-conflicting dependencies
          grep -A 100 '^dependencies:' pubspec.backup.yaml | \
          grep -vE 'flutter|firebase_core|firebase_auth|test|material_color_utilities' | \
          grep -v '^dependencies:' | \
          while read -r line; do
            # Skip empty lines and comments
            if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]]; then
              echo "  $line" >> pubspec.yaml
            fi
          done

          # Add dev_dependencies if they exist (only if not already present)
          if grep -q '^dev_dependencies:' pubspec.backup.yaml && ! grep -q '^dev_dependencies:' pubspec.yaml; then
            echo "" >> pubspec.yaml
            echo "dev_dependencies:" >> pubspec.yaml
            grep -A 100 '^dev_dependencies:' pubspec.backup.yaml | \
            grep -v '^dev_dependencies:' | \
            while read -r line; do
              if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]]; then
                echo "  $line" >> pubspec.yaml
              fi
            done
          fi

          # Add flutter configuration if it exists (only if not already present)
          if grep -q '^flutter:' pubspec.backup.yaml && ! grep -q '^flutter:' pubspec.yaml; then
            echo "" >> pubspec.yaml
            echo "flutter:" >> pubspec.yaml
            grep -A 100 '^flutter:' pubspec.backup.yaml | \
            grep -v '^flutter:' | \
            while read -r line; do
              if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]]; then
                echo "  $line" >> pubspec.yaml
              fi
            done
          fi

          echo "Final pubspec.yaml:"
          cat pubspec.yaml

      - name: Verify YAML Syntax
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if ! python3 -c "import yaml; yaml.safe_load(open('pubspec.yaml'))"; then
            echo "::error::pubspec.yaml is invalid!"
            exit 1
          fi

      - name: Resolve Dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter clean
          flutter pub get

      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -e
          flutter build apk --release \
            --no-sound-null-safety \
            --dart-define=CI_ENV=true \
            --split-debug-info=build/symbols/ \
            --obfuscate

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
