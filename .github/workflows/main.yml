name: Flutter APK Builder (Self-Contained Dart 3.8.6)

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  PROJECT_DIR: 'aurore_frontend'
  FLUTTER_VERSION: '3.16.9'
  FLUTTER_HOME: '/opt/flutter'
  DART_VERSION: '3.8.6'
  LOCAL_DART_SDK: './tools/dart-sdk/dartsdk-linux-x64-release.zip'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to get the Dart SDK from the repo

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            curl git unzip xz-utils \
            libglu1-mesa build-essential \
            libstdc++6 clang cmake ninja-build

      - name: Nuclear Clean
        run: |
          sudo rm -rf /usr/local/flutter
          sudo rm -rf /opt/hostedtoolcache/flutter
          sudo rm -rf ${{ env.FLUTTER_HOME }}
          sudo rm -rf ~/.flutter
          sudo rm -rf ~/.dart*

      - name: Install Flutter
        run: |
          git clone https://github.com/flutter/flutter.git -b ${{ env.FLUTTER_VERSION }} --depth 1 ${{ env.FLUTTER_HOME }}
          echo "${{ env.FLUTTER_HOME }}/bin" >> $GITHUB_PATH

      - name: Install Dart SDK from Repository
        run: |
          echo "=== Installing Dart SDK from local repository ==="
          
          # Verify the SDK exists
          if [ ! -f "${{ env.LOCAL_DART_SDK }}" ]; then
            echo "::error::Dart SDK not found at ${{ env.LOCAL_DART_SDK }}"
            echo "Please download Dart 3.8.6 SDK and place it in your repository"
            exit 1
          fi

          # Verify checksum
          echo "Verifying checksum..."
          echo "${{ env.DART_SDK_SHA256 }}  ${{ env.LOCAL_DART_SDK }}" | sha256sum -c - || \
            (echo "::error::Checksum verification failed!" && exit 1)

          # Install Dart SDK
          echo "Installing Dart SDK..."
          rm -rf ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk
          unzip -q ${{ env.LOCAL_DART_SDK }} -d ${{ env.FLUTTER_HOME }}/bin/cache/

          # Fix directory structure if needed
          if [ -d "${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/dart-sdk" ]; then
            mv ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/dart-sdk/* ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/
            rm -rf ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/dart-sdk
          fi

          # Verify version
          DART_ACTUAL=$(${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/bin/dart --version 2>&1 | awk '{print $4}')
          echo "Installed Dart version: $DART_ACTUAL"
          
          if [ "$DART_ACTUAL" != "${{ env.DART_VERSION }}" ]; then
            echo "::error::Dart version mismatch! Actual: $DART_ACTUAL, Expected: ${{ env.DART_VERSION }}"
            exit 1
          fi

          echo "${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/bin" >> $GITHUB_PATH

      - name: Disable Auto-Update
        run: |
          mkdir -p ${{ env.FLUTTER_HOME }}/bin/internal
          echo "#!/bin/sh" > ${{ env.FLUTTER_HOME }}/bin/internal/update_dart_sdk.sh
          echo "echo 'Dart SDK updates disabled by workflow'" >> ${{ env.FLUTTER_HOME }}/bin/internal/update_dart_sdk.sh
          chmod +x ${{ env.FLUTTER_HOME }}/bin/internal/update_dart_sdk.sh

      - name: Setup Android
        uses: android-actions/setup-android@v3

      - name: Build APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter pub get
          flutter build apk --release --shrink

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
